Bootstrap: docker
From: ubuntu:bionic-20200713

%help
Singularity container with:
    Gadgetron v4.1-latest (as of 8/13/2020)


%setup

%files
./src/startup.sh /
./src/readme /
./src/version / 

%environment
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export LANGUAGE=en_US.UTF-8

export PATH=/opt/bin:$PATH
export PATH=/opt/miniconda/bin:$PATH

export GADGETRON_HOME=/usr/local
export ISMRMRD_HOME=/usr/local

export PATH=$PATH:$GADGETRON_HOME/bin:$ISMRMRD_HOME/bin
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$ISMRMRD_HOME/lib:$GADGETRON_HOME/lib:/.singularity.d/libs:/usr/lib

export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH
export PATH=/usr/local/cuda/bin:$PATH

export HDFLIBS=/opt/hdfinstall/hdf5-1.10.6/hdf5
export HDF5LIBS=/opt/hdfinstall/hdf5-1.10.6/hdf5
export PATH=$PATH:/opt/ant/apache-ant-1.9.15/bin
export PATH=$PATH:$JAVA_HOME/bin
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/hdfinstall/hdf5-1.10.6/hdf5/lib/


%runscript
cd /opt/output
exec /opt/bin/startup.sh "$@"

%test

%post
mkdir -p /xdisk /opt/data /opt/bin /opt/work /opt/input /opt/output /opt/config /opt/tmp

export DEBIAN_FRONTEND=noninteractive
export TZ=America/Phoenix
ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

apt-get update

apt-get install -y \
locales 

echo "LC_ALL=en_US.UTF-8" >> /etc/environment
echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
echo "LANG=en_US.UTF-8" > /etc/locale.conf
locale-gen en_US.UTF-8
export LC_ALL=en_US.UTF-8

mkdir -p /opt/tmp

mv /startup.sh /opt/bin
mv /readme /opt/bin
mv /version /opt/bin

chmod -R 777 /opt


# Identify number of cores if needed further below
export TOTALCORES=$(grep -c ^processor /proc/cpuinfo)
echo "Can see $TOTALCORES processors"
RUNCORES=$(expr ${TOTALCORES} / 2)
echo "Will use $RUNCORES processors when required."

apt-get install -y build-essential \
    git-core wget make cmake gcc-multilib libgtest-dev libboost-all-dev \
    libarmadillo-dev libopenblas-dev libfftw3-dev liblapack-dev liblapacke-dev \
    libxml2-dev libxslt-dev libpugixml-dev libhdf5-dev libplplot-dev libdcmtk-dev \
    python3-dev python3-pip python3-h5py python3-scipy python3-pyxb unzip nano curl


apt-get update

#install CUDA 10.2
cd /opt/tmp
wget http://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda_10.2.89_440.33.01_linux.run
sh cuda_10.2.89_440.33.01_linux.run --silent --toolkit --override --no-man-page --no-opengl-libs
rm  cuda_10.2.89_440.33.01_linux.run

#miniconda
cd /opt/tmp        
wget https://repo.anaconda.com/miniconda/Miniconda3-py38_4.8.3-Linux-x86_64.sh
chmod +x Miniconda3-py38_4.8.3-Linux-x86_64.sh
/bin/bash ./Miniconda3-py38_4.8.3-Linux-x86_64.sh -b -p /opt/miniconda -f
PATH=/opt/miniconda/bin:$PATH
conda install -y pip
conda install -y -c conda-forge numpy scipy matplotlib numpy-devel
pip install pyxb

cd /opt
git clone https://github.com/ismrmrd/ismrmrd.git 
mkdir -p /opt/ismrmrd/build && cd /opt/ismrmrd/build 
cmake ..
make -j $RUNCORES
make install

cd /opt
git clone https://github.com/gadgetron/gadgetron.git
cd /opt/gadgetron
git checkout -f v4.1
mkdir -p /opt/gadgetron/build && cd /opt/gadgetron/build
cmake ..
make -j $RUNCORES
make install  

cd /opt
git clone https://github.com/ismrmrd/siemens_to_ismrmrd.git 
mkdir -p /opt/siemens_to_ismrmrd/build && cd /opt/siemens_to_ismrmrd/build 
cmake ..
make -j $RUNCORES
make install

cd /opt
git clone https://github.com/ismrmrd/philips_to_ismrmrd.git
mkdir -p /opt/philips_to_ismrmrd/build && cd /opt/philips_to_ismrmrd/build
cmake ..
make -j $RUNCORES 
make install

cd /opt
git clone https://github.com/ismrmrd/ismrmrd-python.git
cd ismrmrd-python
python setup.py --verbose install

apt-get install -y libglib2.0-0 libglu1-mesa qt5-default
cd /opt
git clone https://github.com/ismrmrd/ismrmrdviewer.git
cd ismrmrdviewer
python setup.py --verbose install

# install python client
pip install gadgetron 

apt-get install -y openjdk-11-jdk
export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64

#build with configure - this is the veriosn of hdf I need?
#https://portal.hdfgroup.org/display/knowledge/How+do+I+build+HDF5+from+source
mkdir -p /opt/hdfinstall
cd /opt/hdfinstall
wget https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.10/hdf5-1.10.6/src/hdf5-1.10.6.tar.gz
tar xvf hdf5-1.10.6.tar.gz
rm hdf5-1.10.6.tar.gz
cd hdf5-1.10.6
./configure --enable-java
make
make install

mkdir -p /opt/ant
cd /opt/ant
wget http://mirror.cc.columbia.edu/pub/software/apache//ant/binaries/apache-ant-1.9.15-bin.zip
unzip apache-ant-1.9.15-bin.zip
rm apache-ant-1.9.15-bin.zip

cd /opt/
wget https://support.hdfgroup.org/ftp/HDF5/releases/HDF-JAVA/hdfview-3.1.1/src/hdfview-3.1.1.tar.gz
tar xvf hdfview-3.1.1.tar.gz
rm hdfview-3.1.1.tar.gz
cd /opt/hdfview-3.1.1

export HDFLIBS=/opt/hdfinstall/hdf5-1.10.6/hdf5
export HDF5LIBS=/opt/hdfinstall/hdf5-1.10.6/hdf5
export PATH=$PATH:/opt/ant/apache-ant-1.9.15/bin
export PATH=$PATH:$JAVA_HOME/bin
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/hdfinstall/hdf5-1.10.6/hdf5/lib/

ant compile jar

echo java -jar /opt/hdfview-3.1.1/build/jar/HDFView.jar >> /opt/bin/hdfview
chmod +x /opt/bin/hdfview

